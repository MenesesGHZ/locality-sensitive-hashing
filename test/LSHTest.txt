#define BOOST_TEST_MODULE "Sorting test"
#define BOOST_TEST_MAIN

#include <boost/test/unit_test.hpp>
#include <boost/mpl/list.hpp>
#include <vector>
#include <string>
#include <bitset>
#include "lsh.hpp"

using namespace std;

BOOST_AUTO_TEST_SUITE(LLTEST)

typedef boost::mpl::list<int,long> test_types;


BOOST_AUTO_TEST_CASE_TEMPLATE( sorting_test, T, test_types )
{
    bitset<0> state;

    // test projection
    LSH lsh = LSH{10, 3};
    Eigen::VectorXd query1{{1, 1, 1}};
    Eigen::VectorXd query2{{1, 1, 2}};
    Eigen::VectorXd query3{{0, 3, 1}};

    Eigen::VectorXi x1 = lsh.projection(query1);
    Eigen::VectorXi x2 = lsh.projection(query2);
    Eigen::VectorXi x3 = lsh.projection(query3);

    // test fit
    //int dimensions = 3;
    //LSH lsh = LSH{10, dimensions};
    //lsh.data = Eigen::MatrixXd::Random(5, dimensions);
    //lsh.fit();
//
    //Eigen::VectorXd query1{{1, 1, 1}};
    //Eigen::VectorXd query2{{1, 1, 2}};
    //Eigen::VectorXd query3{{0, 3, 1}};
//
    //Eigen::VectorXi x1 = lsh.projection(query1);
    //Eigen::VectorXi x2 = lsh.projection(query2);
    //Eigen::VectorXi x3 = lsh.projection(query3);
//
    //lsh.hamming_distance(x1, x2);

    BOOST_CHECK_EQUAL(state.all(), true);  
}

BOOST_AUTO_TEST_SUITE_END()